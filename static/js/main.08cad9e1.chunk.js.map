{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","offset","setOffset","className","style","width","map","image","index","transform","transition","src","alt","type","onClick","hiddenImagesSize","length","Math","min","disabled","max","App","setStep","setFrameSize","setItemWidth","setAnimationDuration","setInfinite","htmlFor","id","name","value","onChange","event","target","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08cad9e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: Array<string>,\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [offset, setOffset] = useState(0);\n\n  const handlePrevClick = () => {\n    const hiddenImagesSize = (images.length - frameSize) * itemWidth;\n\n    setOffset(Math.min(offset + itemWidth * step, 0));\n\n    if (offset === 0 && infinite) {\n      setOffset(-hiddenImagesSize);\n    }\n  };\n\n  const handleNextClick = () => {\n    const hiddenImagesSize = (images.length - frameSize) * itemWidth;\n\n    setOffset(Math.max(offset - itemWidth * step, -hiddenImagesSize));\n\n    if (offset === -hiddenImagesSize && infinite) {\n      setOffset(0);\n    }\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <ul\n        className=\"Carousel__list\"\n        style={{ width: `${frameSize * itemWidth}px` }}\n      >\n        {images.map((image, index) => (\n          <li\n            className=\"Carousel__item\"\n            key={image}\n            style={{\n              transform: `translateX(${offset}px)`,\n              transition: `${animationDuration}ms`,\n            }}\n          >\n            <img\n              src={image}\n              alt={`${index + 1}`}\n              style={{ width: `${itemWidth}px` }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          onClick={handlePrevClick}\n          disabled={offset === 0 && !infinite}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={handleNextClick}\n          disabled={\n            offset === -(images.length - frameSize) * itemWidth && !infinite\n          }\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nconst App = () => {\n  const images = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy=\"title\"> Carousel with {images.length} images</h1>\n\n      <form className=\"App__form\">\n        <label\n          htmlFor=\"itemId\"\n          className=\"App__label\"\n        >\n          Item Width:\n          <input\n            className=\"App__input\"\n            id=\"itemId\"\n            type=\"number\"\n            name=\"itemWidth\"\n            min=\"100\"\n            max=\"400\"\n            value={itemWidth}\n            onChange={(event) => setItemWidth(+event.target.value)}\n          />\n        </label>\n\n        <label\n          htmlFor=\"frameId\"\n          className=\"App__label\"\n        >\n          Frame Size:\n          <input\n            className=\"App__input\"\n            id=\"frameId\"\n            type=\"number\"\n            min=\"1\"\n            max={images.length - 1}\n            value={frameSize}\n            onChange={(event) => setFrameSize(+event.target.value)}\n          />\n        </label>\n\n        <label\n          htmlFor=\"stepId\"\n          className=\"App__label\"\n        >\n          Step:\n          <input\n            className=\"App__input\"\n            id=\"stepId\"\n            type=\"number\"\n            min=\"1\"\n            max={frameSize}\n            value={step}\n            onChange={(event) => setStep(+event.target.value)}\n          />\n        </label>\n\n        <label\n          htmlFor=\"animationId\"\n          className=\"App__label\"\n        >\n          Animation duration\n          <input\n            className=\"App__input\"\n            id=\"animationId\"\n            type=\"number\"\n            min=\"100\"\n            max=\"5000\"\n            step=\"100\"\n            value={animationDuration}\n            onChange={(event) => setAnimationDuration(+event.target.value)}\n          />\n        </label>\n\n        <label className=\"App__label\">\n          Infinite\n          <input\n            className=\"App__input\"\n            type=\"checkbox\"\n            checked={infinite}\n            onChange={() => setInfinite(!infinite)}\n          />\n        </label>\n\n      </form>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}